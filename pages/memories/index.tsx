import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import { DiaryProvider } from '../../src/providers/diary'
import DateSelector from '../../src/components/DateSelector'
import Cover from '../../src/components/Cover'
import Notices from '../../src/components/Notices'
import moods from '../../src/utils/constant'
import { NextPage } from 'next'
import { useRouter } from 'next/router'

const Memories: NextPage = () => {
  const [diaries, setDiaries] = useState([] as IDiary[]) //or <IDiary[]>
  const [time, getTime] = useState<subCondition>()
  const [currentIndex, setCurrentIndex] = useState(-1)
  const [notices, setNotices] = useState('')
  const router = useRouter()

  const props = {
    diaries,
    currentIndex,
    deleteDiary,
    doubleClick,
  } //Cover组件入参

  useEffect(() => {
    //TODO: 一上来只随机展示一条日记
    getDiariesByWhat('all', {})
  }, [])

  function getDiariesByWhat(what: string, subCondition: subCondition) {
    DiaryProvider.getDiariesByWhat(what, subCondition).then(diaries =>
      setDiaries(diaries)
    )
  }

  async function deleteDiary(id: string, index: number) {
    if (index == currentIndex) {
      setDiaries(diaries.filter(d => d._id !== id)) //删除后重新渲染页面
      setCurrentIndex(-1)
      const { msg } = await DiaryProvider.deleteDiary(id)
      setNotices(msg)
    }
  }

  if (typeof window === 'object') {
    //documentを使う関数を入れる
    document.oncontextmenu = e => {
      e.preventDefault()
    }
  }

  function doubleClick(
    index: number,
    e: React.MouseEvent<HTMLDivElement, MouseEvent>
  ) {
    if (e.button === 2) setCurrentIndex(index) //鼠标双击
    setTimeout(() => {
      setCurrentIndex(-1)
    }, 5000)
  }
  return (
    <>
      <Head>
        <title>{router.pathname.slice(1)}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      {notices && (
        <Notices type='warning' notices={notices} setNotices={setNotices} />
      )}
      {/* <select
        onChange={e => getDiariesByWhat('mood', { mood: e.target.value })}>
        {moods.map(m => (
          <option key={m} value={m}>
            {m}
          </option>
        ))}
      </select>
      {'  '} */}
      {/* <DateSelector handleDateSelect={getTime} /> */}
      {/* <button onClick={() => getDiariesByWhat('date', time!)}>byDate</button>
      {'  '} */}
      {/* // flex flex-col place-items-center */}
      <Cover props1={props} />
    </>
  )
}

export default Memories
