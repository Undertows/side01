import type { NextPage } from 'next'
import { useRouter } from 'next/router'
import React, { useState, useCallback, useMemo } from 'react'
import Head from 'next/head'
import Popup from '../src/components/Popup'
// import Image from 'next/image'
import { DiaryProvider } from '../src/providers/diary'

const Home: NextPage = () => {
  const [diary, setDiary] = useState('')
  const [diaryObj, setDiaryObj] = useState<IDiary | null | undefined>(null)
  const router = useRouter()

  const disabled = useMemo(() => {
    if (diary == '' || diaryObj) return true
    else return false
  }, [diary, diaryObj])

  const saveDiary = async () => {
    //匹配所有(/*/g)不是空格（\S）的字符,得到的结果如果为null（表示没有除空格以外的字符）,则:
    if (diary.match(/\S/g) == null) {
      alert('不能输入空格') //TODO:样式
      return null //打断
    }
    /* 弄了半天原来是/x(?=y)/的x部分错了
     * /#.+ => /#\S+
     * .+的话会把空格也匹配进去
     * 所以y才只会匹配到最末尾的一个\s+\S*
     */
    //允许单独的hash tag  /#\S+(?=[\S\s]*)/
    //不允许单独的hash tag /#\S+(?=\s+\S+)/
    try {
      const { msg, diaryObj } = await DiaryProvider.saveDiary({
        content: diary,
      })
      //拿到了返回的日记对象（刚保存的那条）（无错误）
      if (diaryObj !== undefined) {
        //TODO:sting[]
        diary.match(/#[^,\s#]+/g)
          ? handleHashTag(diary.match(/#[^,\s#]+/g)!, diaryObj._id)
          : null
        setDiaryObj(diaryObj) //激活Popup组件
        document.querySelector('textarea')!.value = ''
      } else console.log(msg) //'日记保存失败。'
    } catch (error) {
      console.log(`日记保存失败 ${error}`)
    }
  }

  async function handleHashTag(hashTag: string[], _id: string) {
    try {
      const { msg } = await DiaryProvider.handleHashTag({
        tags: hashTag,
        id: _id,
      })
      console.log(msg)
    } catch (error) {
      setDiaryObj(null) //网络错误时popup消失
      console.log(`保存tag失败 ${error}`)
    }
  }

  return (
    <div className={`${diaryObj && diaryObj._id && 'relative'}`}>
      <Head>
        <title>SideProject02</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      {diaryObj && diaryObj._id && (
        <Popup _id={diaryObj._id} setDiaryObj={setDiaryObj} />
      )}

      <div className='h-screen w-screen flex flex-col justify-center items-center'>
        <textarea
          disabled={diaryObj ? true : false}
          autoFocus
          onChange={e => setDiary(e.target.value)}
          className='w-[40vw] h-[50vh] rounded outline-none resize-none
        border-transparent border-solid border-2 text-2xl bg-transparent'
        />
        <div className='flex mt-10 gap-20'>
          <button
            className='border-2 border-solid border-transparent
        bg-opacity-40 bg-gray-400 rounded-md w-[10vw] h-[7vh]
        text-xl disabled:opacity-50 disabled:cursor-not-allowed'
            disabled={disabled}
            onClick={saveDiary}>
            烂&nbsp;笔&nbsp;头
          </button>
          <button
            disabled={diaryObj ? true : false}
            className='text-xl'
            onClick={() => router.push('/memories')}>
            好&nbsp;记&nbsp;性
          </button>
        </div>
      </div>
    </div>
  )
}

// Home.getInitialProps = async () => {}

export default Home
