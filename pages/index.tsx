import type { NextPage } from 'next'
import { useRouter } from 'next/router'
import React, { useState, useCallback, useMemo } from 'react'
import Head from 'next/head'
import Popup from '../src/components/Popup'
import Notices from '../src/components/Notices'
// import Image from 'next/image'
import { DiaryProvider } from '../src/providers/diary'

const Home: NextPage = () => {
  const [diary, setDiary] = useState('')
  const [notices, setNotices] = useState('')
  const [diaryObj, setDiaryObj] = useState<IDiary | null | undefined>(null)
  const router = useRouter()

  const disabled = useMemo(() => {
    if (diary == '' || diaryObj) return true
    else return false
  }, [diary, diaryObj])

  const saveDiary = async () => {
    //匹配所有(/*/g)不是空格（\S）的字符,得到的结果如果为null（表示没有除空格以外的字符）,则:
    if (diary.match(/\S/g) == null) {
      setNotices('不能输入空格')
      return null //打断
    }
    /* 弄了半天原来是/x(?=y)/的x部分错了
     * /#.+ => /#\S+
     * .+的话会把空格也匹配进去
     * 所以y才只会匹配到最末尾的一个\s+\S*
     */
    //允许单独的hash tag  /#\S+(?=[\S\s]*)/
    //不允许单独的hash tag /#\S+(?=\s+\S+)/
    try {
      const { msg, diaryObj } = await DiaryProvider.saveDiary({
        content: diary,
      })
      //拿到了返回的日记对象（刚保存的那条）（无错误）
      if (diaryObj !== undefined) {
        setDiaryObj(diaryObj) //激活Popup组件
        setNotices(msg) //激活通知组件
        setDiary('') //清空日记state
      } else console.log(msg) //'日记保存失败。'
    } catch (error) {
      console.log(`日记保存失败 ${error}`)
    }
  }
  // async function handleHashTag() {
  //   // console.log(document.querySelector('textarea')!.value.endsWith('#'))
  //   let textarea = document.querySelector('textarea')
  //   if (true) {
  //     console.log('最后出现的#',textarea!.value.lastIndexOf('#'))
  //     console.log('光标位置',textarea!.selectionEnd)
  // let position=textarea?.selectionEnd
  // if(textarea?.selectionEnd==position){
  //   console.log(textarea?.selectionDirection)
  //   console.log('我在#的位置')
  // }
  // mark=document.querySelector('textarea')?.selectionEnd
  // document.querySelector('textarea')?.selectionEnd == position &&
  //   console.log(position, '有#')
  // try {
  //   const { msg } = await DiaryProvider.handleHashTag({
  //     diary, //太诡异了，，，只有这里不能重名吗
  //     id,
  //   })
  //   console.log(msg)
  // } catch (error) {
  //   setDiaryObj(null) //网络错误时popup消失
  //   console.log(`保存tag失败 ${error}`)
  // }
  // }

  async function showTags() {
    const tags: string[] = await DiaryProvider.showTags()
    console.log(tags)
  }

  return (
    <div
      className={`${
        (diaryObj && diaryObj._id && 'relative') || (notices && 'relative')
      }`}>
      <Head>
        <title>SideProject02</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      {diaryObj && diaryObj._id && (
        <Popup _id={diaryObj._id} setDiaryObj={setDiaryObj} />
      )}
      {!diaryObj && notices && (
        <Notices notices={notices} setNotices={setNotices} />
      )}
      <div className='h-screen w-screen flex flex-col justify-center items-center'>
        <textarea
          disabled={diaryObj ? true : false}
          autoFocus
          onChange={e => setDiary(e.target.value)}
          onSelect={() => console.log(' ')}
          className='w-[60vw] h-[50vh] rounded outline-none resize-none
        border-transparent border-solid border-2 text-xl bg-transparent
        leading-8 tracking-widest'
        />
        <div className='flex mt-10 gap-20'>
          <button
            className='border-2 border-solid border-transparent
        bg-opacity-40 bg-gray-400 rounded-md w-[10vw] h-[7vh]
        text-xl disabled:opacity-50 disabled:cursor-not-allowed'
            disabled={disabled}
            onClick={saveDiary}>
            烂&nbsp;笔&nbsp;头
          </button>
          <button
            disabled={diaryObj ? true : false}
            className='text-xl'
            onClick={() => router.push('memories')}>
            好&nbsp;记&nbsp;性
          </button>
        </div>
      </div>
    </div>
  )
}

// Home.getInitialProps = async () => {}

export default Home
